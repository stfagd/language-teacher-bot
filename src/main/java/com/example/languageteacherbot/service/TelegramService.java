package com.example.languageteacherbot.service;

import com.example.languageteacherbot.entity.User;
import com.example.languageteacherbot.entity.Word;
import com.example.languageteacherbot.entity.UserWord;
import com.example.languageteacherbot.repository.UserRepository;
import com.example.languageteacherbot.repository.WordRepository;
import com.example.languageteacherbot.repository.UserWordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class TelegramService {

    @Value("${telegram.bot.token}")
    private String BOT_TOKEN;

    private final String SEND_MESSAGE_URL = "https://api.telegram.org/bot";

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private WordRepository wordRepository;

    @Autowired
    private UserWordRepository userWordRepository;

    // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, ConversationState> userStates = new HashMap<>();
    // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–≥—Ä—ã "–ö–∞—Ä—Ç–æ—á–∫–∏"
    private final Map<Long, FlashcardGameSession> activeFlashcardGames = new HashMap<>();
    // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
    private final Map<Long, SentenceGameSession> activeSentenceGames = new HashMap<>();
    // –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ "–ú–æ–∏ —Å–ª–æ–≤–∞" (–¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å ID —Å–ª–æ–≤–∞)
    private final Map<Long, Map<String, Long>> userWordDeleteMap = new HashMap<>(); // chatId -> {buttonText -> wordId}

    // --- –ú–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

    public void sendMessage(Long chatId, String text) {
        sendMessageWithButtons(chatId, text, null);
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private void sendMessageWithButtons(Long chatId, String text, List<List<String>> buttons) {
        try {
            Map<String, Object> request = new HashMap<>();
            request.put("chat_id", chatId);
            request.put("text", text);
            request.put("parse_mode", "Markdown");

            if (buttons != null && !buttons.isEmpty()) {
                List<Map<String, Object>> keyboard = new ArrayList<>();
                for (List<String> row : buttons) {
                    List<Map<String, Object>> keyboardRow = new ArrayList<>(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Object
                    for (String buttonText : row) {
                        Map<String, Object> button = new HashMap<>(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Object
                        button.put("text", buttonText);
                        keyboardRow.add(button);
                    }
                    keyboard.add(keyboardRow);
                }
                Map<String, Object> replyMarkup = new HashMap<>(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Object
                replyMarkup.put("keyboard", keyboard);
                replyMarkup.put("resize_keyboard", true);
                replyMarkup.put("one_time_keyboard", false);
                request.put("reply_markup", replyMarkup);
            }

            RestTemplate restTemplate = new RestTemplate();
            restTemplate.postForObject(SEND_MESSAGE_URL + BOT_TOKEN + "/sendMessage", request, String.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram ---

    @SuppressWarnings("unchecked") // –î–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏–∑ Map<String, Object>
    public void processUpdate(Map<String, Object> update) {
        try {
            Map<String, Object> message = (Map<String, Object>) update.get("message");
            if (message == null) return;

            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ chatId
            Map<String, Object> chatMap = (Map<String, Object>) message.get("chat");
            Long chatId = ((Number) chatMap.get("id")).longValue(); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Number –≤ long
            String text = (String) message.get("text");

            Map<String, Object> fromMap = (Map<String, Object>) message.get("from");
            String firstName = (String) fromMap.get("first_name");
            String lastName = (String) fromMap.get("last_name");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞–∫–∞—è-–ª–∏–±–æ –∏–≥—Ä–∞
            if (activeFlashcardGames.containsKey(chatId)) {
                handleFlashcardGameInput(chatId, text);
                return;
            }
            if (activeSentenceGames.containsKey(chatId)) {
                handleSentenceGameInput(chatId, text);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ConversationState state = userStates.getOrDefault(chatId, ConversationState.START);
            switch (state) {
                case START -> handleStart(chatId, firstName, lastName);
                case AWAITING_NATIVE_LANG -> handleNativeLanguageSelection(chatId, text);
                case AWAITING_TARGET_LANG -> handleTargetLanguageSelection(chatId, text);
                case AWAITING_LEVEL -> handleLevelSelection(chatId, text);
                case IN_MENU -> handleMenuCommand(chatId, text);
                case IN_MY_WORDS -> handleMyWordsCommand(chatId, text); // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–∏ —Å–ª–æ–≤–∞"
                case IN_SENTENCE_GAME -> handleSentenceGameInput(chatId, text); // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–±—Ä–æ—Å–∏–ª–æ—Å—å
                default -> {
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
                    userStates.put(chatId, ConversationState.START);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

    private void handleStart(Long chatId, String firstName, String lastName) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        User user;
        if (userOpt.isPresent()) {
            user = userOpt.get();
            user.setLastActivityAt(LocalDateTime.now());
            userRepository.save(user);
            sendMessage(chatId, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, " + firstName + "! üëã");
            showMainMenu(chatId);
        } else {
            user = new User();
            user.setChatId(chatId);
            user.setFirstName(firstName);
            user.setLastName(lastName);
            user.setRegisteredAt(LocalDateTime.now());
            user.setLastActivityAt(LocalDateTime.now());
            userRepository.save(user);

            String welcomeText = "–ü—Ä–∏–≤–µ—Ç, " + firstName + "! üëã\n" +
                    "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤!\n" +
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:";
            List<List<String>> languageButtons = List.of(
                    List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá®üá≥ ‰∏≠Êñá")
            );
            sendMessageWithButtons(chatId, welcomeText, languageButtons);
            userStates.put(chatId, ConversationState.AWAITING_NATIVE_LANG);
        }
    }

    private void handleNativeLanguageSelection(Long chatId, String selectedLanguage) {
        String nativeLangCode;
        if (selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            nativeLangCode = "ru";
        } else if (selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            nativeLangCode = "zh";
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setNativeLanguage(nativeLangCode);
            userRepository.save(user);

            String targetLangText = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:";
            List<List<String>> targetLangButtons;
            if ("ru".equals(nativeLangCode)) {
                targetLangButtons = List.of(List.of("üá®üá≥ ‰∏≠Êñá"));
            } else { // "zh"
                targetLangButtons = List.of(List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π"));
            }
            sendMessageWithButtons(chatId, targetLangText, targetLangButtons);
            userStates.put(chatId, ConversationState.AWAITING_TARGET_LANG);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.");
            userStates.put(chatId, ConversationState.START);
        }
    }

    private void handleTargetLanguageSelection(Long chatId, String selectedLanguage) {
        String targetLangCode;
        if (selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            targetLangCode = "ru";
        } else if (selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            targetLangCode = "zh";
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setTargetLanguage(targetLangCode);
            userRepository.save(user);

            String levelText = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:";
            List<List<String>> levelButtons = List.of(
                    List.of("A1", "A2"),
                    List.of("B1", "B2"),
                    List.of("C1", "C2")
            );
            sendMessageWithButtons(chatId, levelText, levelButtons);
            userStates.put(chatId, ConversationState.AWAITING_LEVEL);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.");
            userStates.put(chatId, ConversationState.START);
        }
    }

    private void handleLevelSelection(Long chatId, String selectedLevel) {
        if (!List.of("A1", "A2", "B1", "B2", "C1", "C2").contains(selectedLevel)) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setLevel(selectedLevel);
            userRepository.save(user);

            String confirmationText = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å *" + selectedLevel + "* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ *" +
                    ("ru".equals(user.getTargetLanguage()) ? "–†—É—Å—Å–∫–∏–π" : "–ö–∏—Ç–∞–π—Å–∫–∏–π") + "*.";
            sendMessage(chatId, confirmationText);
            showMainMenu(chatId);
            userStates.put(chatId, ConversationState.IN_MENU);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.");
            userStates.put(chatId, ConversationState.START);
        }
    }

    private void showMainMenu(Long chatId) {
        String menuText = "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*";
        List<List<String>> menuButtons = List.of(
                List.of("üéÆ –ò–≥—Ä—ã"),
                List.of("üìò –°–ª–æ–≤–∞—Ä—å", "üîÅ –ú–æ–∏ —Å–ª–æ–≤–∞"),
                List.of("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        );
        sendMessageWithButtons(chatId, menuText, menuButtons);
        userStates.put(chatId, ConversationState.IN_MENU); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    }

    private void handleMenuCommand(Long chatId, String command) {
        switch (command) {
            case "üéÆ –ò–≥—Ä—ã" -> showGamesMenu(chatId);
            case "üìò –°–ª–æ–≤–∞—Ä—å" -> showDictionary(chatId);
            case "üîÅ –ú–æ–∏ —Å–ª–æ–≤–∞" -> showMyWords(chatId); // –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ IN_MY_WORDS
            case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -> showSettings(chatId);
            case "/start" -> {
                Optional<User> userOpt = userRepository.findByChatId(chatId);
                if(userOpt.isPresent()) {
                    showMainMenu(chatId);
                    // userStates —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ showMainMenu
                } else {
                    handleStart(chatId, "User", ""); // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, —Ç–∞–∫ –∫–∞–∫ –∏–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                }
            }
            default -> {
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.");
                showMainMenu(chatId);
            }
        }
    }

    // --- –ò–≥—Ä—ã ---

    private void showGamesMenu(Long chatId) {
        String gamesText = "üé≤ *–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:*";
        List<List<String>> gameButtons = List.of(
                List.of("ÎÇ±Îßê Ïπ¥Îìú (–ö–∞—Ä—Ç–æ—á–∫–∏)", "Î¨∏Ïû• ÎßåÎì§Í∏∞ (–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)")
        );
        sendMessageWithButtons(chatId, gamesText, gameButtons);
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –æ—Å—Ç–∞–µ–º—Å—è –≤ –º–µ–Ω—é –¥–æ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    }

    // --- –ò–≥—Ä–∞ "–ö–∞—Ä—Ç–æ—á–∫–∏" (Flashcards) ---

    private void startFlashcardGame(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        User user = userOpt.get();
        List<Word> words = wordRepository.findByLevelAndLang(user.getLevel(), user.getTargetLanguage());

        if (words.isEmpty()) {
            sendMessage(chatId, "üòî –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —è–∑—ã–∫.");
            showMainMenu(chatId);
            return;
        }

        Collections.shuffle(words); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞

        FlashcardGameSession session = new FlashcardGameSession(chatId, "flashcard", words, 0);
        activeFlashcardGames.put(chatId, session);

        sendFlashcard(chatId, session);
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ—Ç —á–µ—Ä–µ–∑ activeFlashcardGames
    }

    private void sendFlashcard(Long chatId, FlashcardGameSession session) {
        int index = session.getCurrentIndex();
        List<Word> words = session.getWords();

        if (index >= words.size()) {
            finishFlashcardGame(chatId, session);
            return;
        }

        Word currentWord = words.get(index);
        String question = "üî§ *–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:*\n\n" + currentWord.getWord();
        String instruction = "\n\n(–ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–µ –∑–Ω–∞—é')";

        List<List<String>> buttons = List.of(List.of("–ù–µ –∑–Ω–∞—é"));
        sendMessageWithButtons(chatId, question + instruction, buttons);
    }

    private void handleFlashcardGameInput(Long chatId, String userAnswer) {
        FlashcardGameSession session = activeFlashcardGames.get(chatId);
        if (session == null) {
            sendMessage(chatId, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.");
            showMainMenu(chatId);
            return;
        }

        List<Word> words = session.getWords();
        int index = session.getCurrentIndex();
        Word currentWord = words.get(index);

        String correctAnswer = currentWord.getTranslation();
        String response;

        if (userAnswer.equals("–ù–µ –∑–Ω–∞—é")) {
            response = "üîπ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: *" + correctAnswer + "*";
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ "–ú–æ–∏ —Å–ª–æ–≤–∞"
            addToMyWords(chatId, currentWord);
        } else {
            if (userAnswer.trim().equalsIgnoreCase(correctAnswer)) {
                response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
            } else {
                response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: *" + correctAnswer + "*";
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ "–ú–æ–∏ —Å–ª–æ–≤–∞"
                addToMyWords(chatId, currentWord);
            }
        }

        sendMessage(chatId, response);

        session.setCurrentIndex(index + 1);
        activeFlashcardGames.put(chatId, session); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é

        if (session.getCurrentIndex() >= words.size()) {
            finishFlashcardGame(chatId, session);
        } else {
            try { Thread.sleep(1000); } catch (InterruptedException ignored) {}
            sendFlashcard(chatId, session);
        }
    }

    private void finishFlashcardGame(Long chatId, FlashcardGameSession session) {
        activeFlashcardGames.remove(chatId);
        sendMessage(chatId, "üéâ –ò–≥—Ä–∞ '–ö–∞—Ä—Ç–æ—á–∫–∏' –æ–∫–æ–Ω—á–µ–Ω–∞! –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!");
        showMainMenu(chatId);
    }

    // --- –ò–≥—Ä–∞ "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" (Sentence) ---

    private void startSentenceGame(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        User user = userOpt.get();
        List<Word> words = wordRepository.findByLevelAndLang(user.getLevel(), user.getTargetLanguage());

        if (words.size() < 3) { // –ú–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã
            sendMessage(chatId, "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–∞ —Ç–≤–æ—ë–º —É—Ä–æ–≤–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —è–∑—ã–∫.");
            showMainMenu(chatId);
            return;
        }

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä—ë–º 3-5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
        Collections.shuffle(words);
        List<Word> selectedWords = words.subList(0, Math.min(5, words.size()));

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
        String correctSentence = createSimpleSentence(selectedWords, user.getTargetLanguage());

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–≥—Ä—ã
        SentenceGameSession session = new SentenceGameSession(chatId, selectedWords, correctSentence);
        activeSentenceGames.put(chatId, session);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å–ª–æ–≤–∞–º–∏
        StringBuilder sb = new StringBuilder();
        sb.append("‚úçÔ∏è *–°–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤:*\n\n");
        List<String> wordList = selectedWords.stream().map(Word::getWord).collect(Collectors.toList());
        sb.append(String.join(", ", wordList));
        sb.append("\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —á–∞—Ç.");

        sendMessage(chatId, sb.toString());
        userStates.put(chatId, ConversationState.IN_SENTENCE_GAME); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    private String createSimpleSentence(List<Word> words, String lang) {
        if ("ru".equalsIgnoreCase(lang) && words.size() >= 3) {
            // –ü—Ä–∏–º–µ—Ä: [—è, –µ—Å—Ç—å, —è–±–ª–æ–∫–æ] -> "–Ø –µ–º —è–±–ª–æ–∫–æ."
            return words.get(0).getWord() + " " + words.get(1).getWord() + " " + words.get(2).getWord() + ".";
        } else if ("zh".equalsIgnoreCase(lang) && words.size() >= 3) {
            // –ü—Ä–∏–º–µ—Ä: [Êàë, ÂêÉ, ËãπÊûú] -> "ÊàëÂêÉËãπÊûú„ÄÇ"
            return words.get(0).getWord() + words.get(1).getWord() + words.get(2).getWord() + "„ÄÇ";
        }
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞
        return words.stream().map(Word::getWord).collect(Collectors.joining(" ")) + ".";
    }

    private void handleSentenceGameInput(Long chatId, String userSentence) {
        SentenceGameSession session = activeSentenceGames.get(chatId);
        if (session == null) {
             // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –≤ –º–µ–Ω—é
             sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.");
             showMainMenu(chatId);
             userStates.put(chatId, ConversationState.IN_MENU); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            return;
        }

        String correctSentence = session.getCorrectSentence();
        String response;

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        if (userSentence.trim().equalsIgnoreCase(correctSentence.trim())) {
            response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!";
        } else {
            response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: *" + correctSentence + "*";
        }

        sendMessage(chatId, response);
        activeSentenceGames.remove(chatId); // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –∏–≥—Ä—ã
        userStates.put(chatId, ConversationState.IN_MENU); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        showMainMenu(chatId);
    }


    // --- –°–ª–æ–≤–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏ ---

    private void showDictionary(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }
        User user = userOpt.get();

        List<Word> words = wordRepository.findByLevelAndLang(user.getLevel(), user.getTargetLanguage());
        if (words.isEmpty()) {
            sendMessage(chatId, "üòî –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.");
            showMainMenu(chatId);
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üìò *–°–ª–æ–≤–∞—Ä—å (–£—Ä–æ–≤–µ–Ω—å ").append(user.getLevel()).append(")*\n\n");
        for (int i = 0; i < Math.min(words.size(), 30); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 30 —Å–ª–æ–≤–∞–º–∏
            Word w = words.get(i);
            sb.append(w.getWord()).append(" - ").append(w.getTranslation()).append("\n");
        }
        if (words.size() > 30) {
            sb.append("\n... –∏ –µ—â—ë ").append(words.size() - 30).append(" —Å–ª–æ–≤.");
        }

        sendMessage(chatId, sb.toString());
        showMainMenu(chatId);
    }

    private void showMyWords(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        List<UserWord> userWords = userWordRepository.findByUserChatId(chatId);
        if (userWords.isEmpty()) {
            sendMessage(chatId, "üîÅ –¢—ã –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∫–∞–∫ '–Ω–µ –∑–Ω–∞—é'.");
            showMainMenu(chatId);
            return;
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üîÅ *–¢–≤–æ–∏ —Å–ª–æ–≤–∞ (–ù–µ –∑–Ω–∞—é)*\n\n");

        List<List<String>> buttons = new ArrayList<>();
        List<String> row = new ArrayList<>();
        Map<String, Long> deleteMap = new HashMap<>(); // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        for (int i = 0; i < Math.min(userWords.size(), 20); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å–ª–æ–≤–∞–º–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            UserWord uw = userWords.get(i);
            sb.append((i+1)).append(". ").append(uw.getWord().getWord()).append(" - ").append(uw.getWord().getTranslation()).append("\n");

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            String buttonText = "‚ùå " + uw.getWord().getWord();
            deleteMap.put(buttonText, uw.getWord().getId()); // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å ID —Å–ª–æ–≤–∞
            row.add(buttonText);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
            if (row.size() == 2) {
                buttons.add(new ArrayList<>(row));
                row.clear();
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (!row.isEmpty()) {
            buttons.add(row);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        buttons.add(List.of("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userWordDeleteMap.put(chatId, deleteMap);

        sendMessageWithButtons(chatId, sb.toString(), buttons);
        userStates.put(chatId, ConversationState.IN_MY_WORDS); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ "–ú–æ–∏ —Å–ª–æ–≤–∞"
    private void handleMyWordsCommand(Long chatId, String command) {
        if (command.equals("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")) {
            userStates.put(chatId, ConversationState.IN_MENU);
            showMainMenu(chatId);
            userWordDeleteMap.remove(chatId); // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            return;
        } else if (command.startsWith("‚ùå ")) {
            // –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
            handleDeleteWord(chatId, command);
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ showMyWords —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç
        } else {
             // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –¥—É–º–∞–ª, —á—Ç–æ —ç—Ç–æ –º–µ–Ω—é
             sendMessage(chatId, "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å '–ú–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏' –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.");
             // –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
             showMyWords(chatId); // –≠—Ç–æ —Å–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ IN_MY_WORDS
        }
    }

    private void handleDeleteWord(Long chatId, String buttonCommand) {
        Map<String, Long> deleteMap = userWordDeleteMap.get(chatId);
        if (deleteMap == null || !deleteMap.containsKey(buttonCommand)) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.");
            showMyWords(chatId); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            return;
        }

        Long wordIdToDelete = deleteMap.get(buttonCommand);
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            userWordDeleteMap.remove(chatId);
            return;
        }

        Optional<UserWord> userWordOpt = userWordRepository.findByUserChatIdAndWordId(chatId, wordIdToDelete);
        if (userWordOpt.isPresent()) {
            userWordRepository.delete(userWordOpt.get());
            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            Optional<Word> wordOpt = wordRepository.findById(wordIdToDelete);
            String wordStr = wordOpt.map(Word::getWord).orElse("—Å–ª–æ–≤–æ");
            sendMessage(chatId, "‚úÖ –°–ª–æ–≤–æ *" + wordStr + "* —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞.");
        } else {
            sendMessage(chatId, "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ.");
        }

        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        showMyWords(chatId); // –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç deleteMap –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }


    private void showSettings(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            String settingsText = "‚öôÔ∏è *–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n" +
                    "–†–æ–¥–Ω–æ–π —è–∑—ã–∫: " + ("ru".equals(user.getNativeLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                    "–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫: " + ("ru".equals(user.getTargetLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                    "–£—Ä–æ–≤–µ–Ω—å: " + user.getLevel() + "\n\n" +
                    "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.";
            sendMessage(chatId, settingsText);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        showMainMenu(chatId);
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    private void addToMyWords(Long chatId, Word word) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            Optional<UserWord> existingUW = userWordRepository.findByUserChatIdAndWordId(chatId, word.getId());
            if (existingUW.isEmpty()) {
                UserWord uw = new UserWord();
                uw.setUserChatId(chatId);
                uw.setWord(word);
                userWordRepository.save(uw);
            }
        }
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–µ—Å—Å–∏–π –∏–≥—Ä ---

    private enum ConversationState {
        START, AWAITING_NATIVE_LANG, AWAITING_TARGET_LANG, AWAITING_LEVEL, IN_MENU, IN_MY_WORDS, IN_SENTENCE_GAME
    }

    private static class FlashcardGameSession {
        private final Long userId;
        private final String gameType;
        private final List<Word> words;
        private int currentIndex;

        public FlashcardGameSession(Long userId, String gameType, List<Word> words, int currentIndex) {
            this.userId = userId;
            this.gameType = gameType; // –í—Å–µ–≥–¥–∞ "flashcard" –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            this.words = new ArrayList<>(words); // –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            this.currentIndex = currentIndex;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã
        public Long getUserId() { return userId; }
        public String getGameType() { return gameType; }
        public List<Word> getWords() { return words; }
        public int getCurrentIndex() { return currentIndex; }
        public void setCurrentIndex(int currentIndex) { this.currentIndex = currentIndex; }
    }

    private static class SentenceGameSession {
        private final Long userId;
        private final List<Word> words;
        private final String correctSentence;

        public SentenceGameSession(Long userId, List<Word> words, String correctSentence) {
            this.userId = userId;
            this.words = new ArrayList<>(words); // –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            this.correctSentence = correctSentence;
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public Long getUserId() { return userId; }
        public List<Word> getWords() { return words; }
        public String getCorrectSentence() { return correctSentence; }
    }
}