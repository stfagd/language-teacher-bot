package com.example.languageteacherbot.service;

import com.example.languageteacherbot.entity.User;
import com.example.languageteacherbot.entity.Word;
import com.example.languageteacherbot.entity.UserWord;
import com.example.languageteacherbot.repository.UserRepository;
import com.example.languageteacherbot.repository.WordRepository;
import com.example.languageteacherbot.repository.UserWordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
public class TelegramService {

    @Value("${telegram.bot.token}")
    private String BOT_TOKEN;

    private final String SEND_MESSAGE_URL = "https://api.telegram.org/bot";

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private WordRepository wordRepository;

    @Autowired
    private UserWordRepository userWordRepository;

    private final Map<Long, ConversationState> userStates = new HashMap<>();
    private final Map<Long, FlashcardGameSession> activeFlashcardGames = new HashMap<>();
    private final Map<Long, SentenceGameSession> activeSentenceGames = new HashMap<>();
    private final Map<Long, Map<String, Long>> userWordDeleteMap = new HashMap<>();
    private final Map<Long, Integer> userDictionaryPage = new ConcurrentHashMap<>();

    public void sendMessage(Long chatId, String text) {
        sendMessageWithButtons(chatId, text, null);
    }

    private void sendMessageWithButtons(Long chatId, String text, List<List<String>> buttons) {
        try {
            Map<String, Object> request = new HashMap<>();
            request.put("chat_id", chatId);
            request.put("text", text);
            request.put("parse_mode", "Markdown");

            if (buttons != null && !buttons.isEmpty()) {
                List<List<Map<String, Object>>> keyboard = new ArrayList<>();
                for (List<String> row : buttons) {
                    List<Map<String, Object>> keyboardRow = new ArrayList<>();
                    for (String buttonText : row) {
                        Map<String, Object> button = new HashMap<>();
                        button.put("text", buttonText);
                        keyboardRow.add(button);
                    }
                    keyboard.add(keyboardRow);
                }

                Map<String, Object> replyMarkup = new HashMap<>();
                replyMarkup.put("keyboard", keyboard);
                replyMarkup.put("resize_keyboard", true);
                replyMarkup.put("one_time_keyboard", false);
                request.put("reply_markup", replyMarkup);
            }

            RestTemplate restTemplate = new RestTemplate();
            restTemplate.postForObject(SEND_MESSAGE_URL + BOT_TOKEN + "/sendMessage", request, String.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @SuppressWarnings("unchecked")
    public void processUpdate(Map<String, Object> update) {
        try {
            if (update.containsKey("callback_query")) {
                Map<String, Object> callbackQuery = (Map<String, Object>) update.get("callback_query");
                String data = (String) callbackQuery.get("data");
                Map<String, Object> message = (Map<String, Object>) callbackQuery.get("message");
                Long chatId = ((Number) ((Map<String, Object>) message.get("chat")).get("id")).longValue();
                Integer messageId = ((Number) message.get("message_id")).intValue();

                if (data.startsWith("dict_prev:")) {
                    int page = Integer.parseInt(data.split(":")[1]);
                    userDictionaryPage.put(chatId, page);
                    editMessageWithDictionary(chatId, messageId);
                } else if (data.startsWith("dict_next:")) {
                    int page = Integer.parseInt(data.split(":")[1]);
                    userDictionaryPage.put(chatId, page);
                    editMessageWithDictionary(chatId, messageId);
                } else if (data.equals("main_menu")) {
                    showMainMenu(chatId);
                }
                return;
            }

            Map<String, Object> message = (Map<String, Object>) update.get("message");
            if (message == null) return;

            Map<String, Object> chatMap = (Map<String, Object>) message.get("chat");
            Long chatId = ((Number) chatMap.get("id")).longValue();
            String text = (String) message.get("text");

            Map<String, Object> fromMap = (Map<String, Object>) message.get("from");
            String firstName = (String) fromMap.get("first_name");
            String lastName = (String) fromMap.get("last_name");

            if (activeFlashcardGames.containsKey(chatId)) {
                handleFlashcardGameInput(chatId, text);
                return;
            }
            if (activeSentenceGames.containsKey(chatId)) {
                handleSentenceGameInput(chatId, text);
                return;
            }

            ConversationState state = userStates.getOrDefault(chatId, ConversationState.START);
            switch (state) {
                case START -> handleStart(chatId, firstName, lastName);
                case AWAITING_NATIVE_LANG -> handleNativeLanguageSelection(chatId, text);
                case AWAITING_TARGET_LANG -> handleTargetLanguageSelection(chatId, text);
                case AWAITING_LEVEL -> handleLevelSelection(chatId, text);
                case IN_MENU -> handleMenuCommand(chatId, text);
                case IN_MY_WORDS -> handleMyWordsCommand(chatId, text);
                case IN_SENTENCE_GAME -> handleSentenceGameInput(chatId, text);
                case IN_SETTINGS -> handleSettingsCommand(chatId, text);
                case IN_DICTIONARY -> handleDictionaryCommand(chatId, text);
                case AWAITING_NEW_NATIVE_LANG -> handleNewNativeLanguageSelection(chatId, text);
                case AWAITING_NEW_TARGET_LANG -> handleNewTargetLanguageSelection(chatId, text);
                case AWAITING_NEW_LEVEL -> handleNewLevelSelection(chatId, text);
                default -> {
                    sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
                    userStates.put(chatId, ConversationState.START);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleStart(Long chatId, String firstName, String lastName) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        User user;
        if (userOpt.isPresent()) {
            user = userOpt.get();
            user.setLastActivityAt(LocalDateTime.now());
            userRepository.save(user);
            String nativeLang = user.getNativeLanguage();
            String welcomeBackText = nativeLang.equals("ru") ? "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, " : "Ê¨¢ËøéÂõûÊù•Ôºå";
            sendMessage(chatId, welcomeBackText + firstName + "! üëã");
            showMainMenu(chatId);
            userStates.put(chatId, ConversationState.IN_MENU);
        } else {
            user = new User();
            user.setChatId(chatId);
            user.setFirstName(firstName);
            user.setLastName(lastName);
            user.setRegisteredAt(LocalDateTime.now());
            user.setLastActivityAt(LocalDateTime.now());
            userRepository.save(user);

            String welcomeText = "‰Ω†Â•ΩÔºå" + firstName + "! üëã\n" +
                    "ÊàëÊòØ‰Ω†Â≠¶‰π†‰øÑËØ≠ÂíåÊ±âËØ≠ÁöÑÂä©Êâã!\n" +
                    "È¶ñÂÖàÔºåÈÄâÊã©ÊÇ®ÁöÑÊØçËØ≠„ÄÇ:\n" +
                    "–ü—Ä–∏–≤–µ—Ç, " + firstName + "! üëã\n" +
                    "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤!\n" +
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:";
            List<List<String>> languageButtons = List.of(
                    List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá®üá≥ ‰∏≠Êñá")
            );
            sendMessageWithButtons(chatId, welcomeText, languageButtons);
            userStates.put(chatId, ConversationState.AWAITING_NATIVE_LANG);
        }
    }

    private void handleNativeLanguageSelection(Long chatId, String selectedLanguage) {
        String nativeLangCode;
        String targetLangText;
        List<List<String>> targetLangButtons;

        if (selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            nativeLangCode = "ru";
            targetLangText = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:";
            targetLangButtons = List.of(List.of("üá®üá≥ ‰∏≠Êñá"));
        } else if (selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            nativeLangCode = "zh";
            targetLangText = "ÂæàÂ•ΩÔºÅÁé∞Âú®ÈÄâÊã©‰Ω†ÊÉ≥Â≠¶‰π†ÁöÑËØ≠Ë®ÄÔºö";
            targetLangButtons = List.of(List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π"));
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setNativeLanguage(nativeLangCode);
            userRepository.save(user);

            sendMessageWithButtons(chatId, targetLangText, targetLangButtons);
            userStates.put(chatId, ConversationState.AWAITING_TARGET_LANG);
        } else {
            sendMessage(chatId, nativeLangCode.equals("ru") ? "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start." : "ÈîôËØØ„ÄÇËØ∑‰ªé /start ÈáçÊñ∞ÂºÄÂßã„ÄÇ");
            userStates.put(chatId, ConversationState.START);
        }
    }

    private void handleTargetLanguageSelection(Long chatId, String selectedLanguage) {
        String targetLangCode;
        String levelText;
        List<List<String>> levelButtons;

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.");
            userStates.put(chatId, ConversationState.START);
            return;
        }
        User user = userOpt.get();
        String nativeLang = user.getNativeLanguage();

        if (nativeLang.equals("ru") && selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            targetLangCode = "zh";
        } else if (nativeLang.equals("zh") && selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            targetLangCode = "ru";
        } else {
            String errorMessage = nativeLang.equals("ru") ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤." : "ËØ∑ÈÄâÊã©Êèê‰æõÁöÑÈÄâÈ°π‰πã‰∏Ä„ÄÇ";
            sendMessage(chatId, errorMessage);
            String targetLangText = nativeLang.equals("ru") ? "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å:" : "ÂæàÂ•ΩÔºÅÁé∞Âú®ÈÄâÊã©‰Ω†ÊÉ≥Â≠¶‰π†ÁöÑËØ≠Ë®ÄÔºö";
            List<List<String>> targetLangButtons = nativeLang.equals("ru") ? List.of(List.of("üá®üá≥ ‰∏≠Êñá")) : List.of(List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π"));
            sendMessageWithButtons(chatId, targetLangText, targetLangButtons);
            return;
        }

        user.setTargetLanguage(targetLangCode);
        userRepository.save(user);

        if (nativeLang.equals("ru")) {
            levelText = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:";
            levelButtons = List.of(
                    List.of("A1", "A2"),
                    List.of("B1", "B2"),
                    List.of("C1", "C2")
            );
        } else {
            levelText = "ÈÄâÊã©‰Ω†ÁöÑÁü•ËØÜÊ∞¥Âπ≥Ôºö";
            levelButtons = List.of(
                    List.of("A1", "A2"),
                    List.of("B1", "B2"),
                    List.of("C1", "C2")
            );
        }

        sendMessageWithButtons(chatId, levelText, levelButtons);
        userStates.put(chatId, ConversationState.AWAITING_LEVEL);
    }

    private void handleLevelSelection(Long chatId, String selectedLevel) {
        if (!List.of("A1", "A2", "B1", "B2", "C1", "C2").contains(selectedLevel)) {
            Optional<User> userOpt = userRepository.findByChatId(chatId);
            String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");
            String errorMessage = nativeLang.equals("ru") ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤." : "ËØ∑ÈÄâÊã©Êèê‰æõÁöÑÁ∫ßÂà´‰πã‰∏Ä„ÄÇ";
            sendMessage(chatId, errorMessage);
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setLevel(selectedLevel);
            userRepository.save(user);

            String nativeLang = user.getNativeLanguage();
            String targetLangName = ("ru".equals(user.getTargetLanguage()) ? (nativeLang.equals("ru") ? "–†—É—Å—Å–∫–∏–π" : "‰øÑËØ≠") : (nativeLang.equals("ru") ? "–ö–∏—Ç–∞–π—Å–∫–∏–π" : "‰∏≠Êñá"));
            String confirmationText;
            if (nativeLang.equals("ru")) {
                confirmationText = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å *" + selectedLevel + "* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ *" + targetLangName + "*.";
            } else {
                confirmationText = "ÂæàÂ•ΩÔºÅ‰Ω†ÈÄâÊã©‰∫Ü *" + selectedLevel + "* Á∫ßÂà´Êù•Â≠¶‰π† *" + targetLangName + "*„ÄÇ";
            }

            sendMessage(chatId, confirmationText);
            showMainMenu(chatId);
            userStates.put(chatId, ConversationState.IN_MENU);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å /start.");
            userStates.put(chatId, ConversationState.START);
        }
    }

    private void showMainMenu(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String menuText;
        List<List<String>> menuButtons;

        if (nativeLang.equals("ru")) {
            menuText = "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*";
            menuButtons = List.of(
                    List.of("üéÆ –ò–≥—Ä—ã"),
                    List.of("üìò –°–ª–æ–≤–∞—Ä—å", "üîÅ –ú–æ–∏ —Å–ª–æ–≤–∞"),
                    List.of("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            );
        } else {
            menuText = "üéØ *‰∏ªËèúÂçï*";
            menuButtons = List.of(
                    List.of("üéÆ Ê∏∏Êàè"),
                    List.of("üìò ËØçÂÖ∏", "üîÅ ÊàëÁöÑÂçïËØç"),
                    List.of("‚öôÔ∏è ËÆæÁΩÆ")
            );
        }

        sendMessageWithButtons(chatId, menuText, menuButtons);
        userStates.put(chatId, ConversationState.IN_MENU);
    }

    private void handleMenuCommand(Long chatId, String command) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String gamesCmd = nativeLang.equals("ru") ? "üéÆ –ò–≥—Ä—ã" : "üéÆ Ê∏∏Êàè";
        String dictCmd = nativeLang.equals("ru") ? "üìò –°–ª–æ–≤–∞—Ä—å" : "üìò ËØçÂÖ∏";
        String myWordsCmd = nativeLang.equals("ru") ? "üîÅ –ú–æ–∏ —Å–ª–æ–≤–∞" : "üîÅ ÊàëÁöÑÂçïËØç";
        String settingsCmd = nativeLang.equals("ru") ? "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" : "‚öôÔ∏è ËÆæÁΩÆ";

        if (command.equals(gamesCmd)) {
            showGamesMenu(chatId);
        } else if (command.equals(dictCmd)) {
            userDictionaryPage.put(chatId, 0);
            showDictionary(chatId);
        } else if (command.equals(myWordsCmd)) {
            showMyWords(chatId);
        } else if (command.equals(settingsCmd)) {
            showSettings(chatId);
        } else if (command.equals("/start")) {
            if(userOpt.isPresent()) {
                showMainMenu(chatId);
            } else {
                handleStart(chatId, "User", "");
            }
        } else if (command.equals(nativeLang.equals("ru") ? "Flash card (–ö–∞—Ä—Ç–æ—á–∫–∏)" : "Flash card (ÂçïËØçÂç°Áâá)")) {
            startFlashcardGame(chatId);
        } else if (command.equals(nativeLang.equals("ru") ? "Sentence (–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)" : "Sentence (ÈÄ†Âè•)")) {
            startSentenceGame(chatId);
        } else if (command.equals(nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ")) {
            int currentPage = userDictionaryPage.getOrDefault(chatId, 0);
            if (currentPage > 0) {
                userDictionaryPage.put(chatId, currentPage - 1);
            }
            showDictionary(chatId);
        } else if (command.equals(nativeLang.equals("ru") ? "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è" : "‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è")) {
            int currentPage = userDictionaryPage.getOrDefault(chatId, 0);
            int totalPages = (int) Math.ceil((double) wordRepository.findByLevelAndLang(
                userOpt.get().getLevel(), userOpt.get().getTargetLanguage()).size() / 30.0);
            if (currentPage < totalPages - 1) {
                userDictionaryPage.put(chatId, currentPage + 1);
            }
            showDictionary(chatId);
        } else if (command.equals(nativeLang.equals("ru") ? "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" : "üîô ‰∏ªËèúÂçï")) {
            showMainMenu(chatId);
        } else {
            String message = nativeLang.equals("ru") ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é." : "Êú™Áü•ÂëΩ‰ª§„ÄÇËØ∑‰ΩøÁî®ËèúÂçï„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
        }
    }

    private void showGamesMenu(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String gamesText;
        List<List<String>> gameButtons;

        if (nativeLang.equals("ru")) {
            gamesText = "üé≤ *–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:*";
            gameButtons = List.of(
                    List.of("Flash card (–ö–∞—Ä—Ç–æ—á–∫–∏)", "Sentence (–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)"),
                    List.of("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
            );
        } else {
            gamesText = "üé≤ *ÈÄâÊã©Ê∏∏Êàè:*";
            gameButtons = List.of(
                    List.of("Flash card (ÂçïËØçÂç°Áâá)", "Sentence (ÈÄ†Âè•)"),
                    List.of("‚¨ÖÔ∏è ËøîÂõûËèúÂçï")
            );
        }

        sendMessageWithButtons(chatId, gamesText, gameButtons);
    }

    private void startFlashcardGame(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        User user = userOpt.get();
        List<Word> words = wordRepository.findByLevelAndLang(user.getLevel(), user.getTargetLanguage());

        if (words.isEmpty()) {
            String nativeLang = user.getNativeLanguage();
            String message = nativeLang.equals("ru") ? "üòî –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —è–∑—ã–∫." : "üòî Ê≠§Á∫ßÂà´Ê≤°ÊúâÂçïËØç„ÄÇÂ∞ùËØïÂÖ∂‰ªñÁ∫ßÂà´ÊàñËØ≠Ë®Ä„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
            return;
        }

        Collections.shuffle(words);

        FlashcardGameSession session = new FlashcardGameSession(chatId, "flashcard", words, 0);
        activeFlashcardGames.put(chatId, session);

        sendFlashcard(chatId, session);
    }

    private void sendFlashcard(Long chatId, FlashcardGameSession session) {
        int index = session.getCurrentIndex();
        List<Word> words = session.getWords();

        if (index >= words.size()) {
            finishFlashcardGame(chatId, session);
            return;
        }

        Word currentWord = words.get(index);

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String question;
        String instruction;
        if (nativeLang.equals("ru")) {
            question = "üî§ *–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:*\n\n" + currentWord.getWord();
            instruction = "\n\n(–ù–∞–ø–∏—à–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–µ –∑–Ω–∞—é')";
        } else {
            question = "üî§ *ÁøªËØëÂçïËØç:*\n\n" + currentWord.getWord();
            instruction = "\n\n(ÂÜô‰∏ãÁøªËØëÊàñÁÇπÂáª‚Äú‰∏çËÆ§ËØÜ‚Äù)";
        }

        List<List<String>> buttons = List.of(List.of(nativeLang.equals("ru") ? "–ù–µ –∑–Ω–∞—é" : "‰∏çËÆ§ËØÜ"));
        sendMessageWithButtons(chatId, question + instruction, buttons);
    }

    private void handleFlashcardGameInput(Long chatId, String userAnswer) {
        FlashcardGameSession session = activeFlashcardGames.get(chatId);
        if (session == null) {
            sendMessage(chatId, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.");
            showMainMenu(chatId);
            return;
        }

        List<Word> words = session.getWords();
        int index = session.getCurrentIndex();
        Word currentWord = words.get(index);

        String correctAnswer = currentWord.getTranslation();

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String response;
        String dontKnowButton = nativeLang.equals("ru") ? "–ù–µ –∑–Ω–∞—é" : "‰∏çËÆ§ËØÜ";

        if (userAnswer.equals(dontKnowButton)) {
            if (nativeLang.equals("ru")) {
                response = "üîπ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: *" + correctAnswer + "*";
            } else {
                response = "üîπ Ê≠£Á°ÆÁøªËØë: *" + correctAnswer + "*";
            }
            addToMyWords(chatId, currentWord);
        } else {
            if (userAnswer.trim().equalsIgnoreCase(correctAnswer)) {
                if (nativeLang.equals("ru")) {
                    response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
                } else {
                    response = "‚úÖ Ê≠£Á°ÆÔºÅ";
                }
            } else {
                if (nativeLang.equals("ru")) {
                    response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: *" + correctAnswer + "*";
                } else {
                    response = "‚ùå ÈîôËØØ„ÄÇ\nÊ≠£Á°ÆÁøªËØë: *" + correctAnswer + "*";
                }
                addToMyWords(chatId, currentWord);
            }
        }

        sendMessage(chatId, response);

        session.setCurrentIndex(index + 1);
        activeFlashcardGames.put(chatId, session);

        if (session.getCurrentIndex() >= words.size()) {
            finishFlashcardGame(chatId, session);
        } else {
            try { Thread.sleep(1000); } catch (InterruptedException ignored) {}
            sendFlashcard(chatId, session);
        }
    }

    private void finishFlashcardGame(Long chatId, FlashcardGameSession session) {
        activeFlashcardGames.remove(chatId);

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String finishMessage;
        if (nativeLang.equals("ru")) {
            finishMessage = "üéâ –ò–≥—Ä–∞ '–ö–∞—Ä—Ç–æ—á–∫–∏' –æ–∫–æ–Ω—á–µ–Ω–∞! –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!";
        } else {
            finishMessage = "üéâ ‚ÄúÂçïËØçÂç°Áâá‚ÄùÊ∏∏ÊàèÁªìÊùüÔºÅÂÅöÂæóÂ•ΩÔºÅ";
        }

        sendMessage(chatId, finishMessage);
        showMainMenu(chatId);
    }

    private void startSentenceGame(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        User user = userOpt.get();
        List<Word> words = wordRepository.findByLevelAndLang(user.getLevel(), user.getTargetLanguage());

        if (words.size() < 3) {
            String nativeLang = user.getNativeLanguage();
            String message = nativeLang.equals("ru") ? "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã –Ω–∞ —Ç–≤–æ—ë–º —É—Ä–æ–≤–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —è–∑—ã–∫." : "üòî ‰Ω†Ëøô‰∏™Á∫ßÂà´ÁöÑÊ∏∏ÊàèÂçïËØç‰∏çÂ§ü„ÄÇÂ∞ùËØïÂÖ∂‰ªñÁ∫ßÂà´ÊàñËØ≠Ë®Ä„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
            return;
        }

        Collections.shuffle(words);
        List<Word> selectedWords = words.subList(0, Math.min(5, words.size()));

        String correctSentence = createSimpleSentence(selectedWords, user.getTargetLanguage());

        SentenceGameSession session = new SentenceGameSession(chatId, selectedWords, correctSentence);
        activeSentenceGames.put(chatId, session);

        StringBuilder sb = new StringBuilder();

        String nativeLang = user.getNativeLanguage();
        if (nativeLang.equals("ru")) {
            sb.append("‚úçÔ∏è *–°–æ—Å—Ç–∞–≤—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —ç—Ç–∏—Ö —Å–ª–æ–≤:*\n\n");
        } else {
            sb.append("‚úçÔ∏è *Áî®Ëøô‰∫õËØçÈÄ†Âè•:*\n\n");
        }

        List<String> wordList = selectedWords.stream().map(Word::getWord).collect(Collectors.toList());
        sb.append(String.join(", ", wordList));

        if (nativeLang.equals("ru")) {
            sb.append("\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —á–∞—Ç.");
        } else {
            sb.append("\n\nÂú®ËÅäÂ§©‰∏≠ÂÜô‰∏ãÂè•Â≠ê„ÄÇ");
        }

        sendMessage(chatId, sb.toString());
        userStates.put(chatId, ConversationState.IN_SENTENCE_GAME);
    }

    private String createSimpleSentence(List<Word> words, String lang) {
        if ("ru".equalsIgnoreCase(lang) && words.size() >= 3) {
            return words.get(0).getWord() + " " + words.get(1).getWord() + " " + words.get(2).getWord() + ".";
        } else if ("zh".equalsIgnoreCase(lang) && words.size() >= 3) {
            return words.get(0).getWord() + words.get(1).getWord() + words.get(2).getWord() + "„ÄÇ";
        }
        return words.stream().map(Word::getWord).collect(Collectors.joining(" ")) + ".";
    }

    private void handleSentenceGameInput(Long chatId, String userSentence) {
        SentenceGameSession session = activeSentenceGames.get(chatId);
        if (session == null) {
            Optional<User> userOpt = userRepository.findByChatId(chatId);
            String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");
            String message = nativeLang.equals("ru") ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é." : "Êú™Áü•ÂëΩ‰ª§„ÄÇËØ∑‰ΩøÁî®ËèúÂçï„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
            userStates.put(chatId, ConversationState.IN_MENU);
            return;
        }

        String correctSentence = session.getCorrectSentence();

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String response;
        if (userSentence.trim().equalsIgnoreCase(correctSentence.trim())) {
            if (nativeLang.equals("ru")) {
                response = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!";
            } else {
                response = "‚úÖ Ê≠£Á°ÆÔºÅÂ•ΩÂè•Â≠êÔºÅ";
            }
        } else {
            if (nativeLang.equals("ru")) {
                response = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: *" + correctSentence + "*";
            } else {
                response = "‚ùå ÈîôËØØ„ÄÇ\nÊ≠£Á°ÆÁ≠îÊ°à: *" + correctSentence + "*";
            }
        }

        sendMessage(chatId, response);
        activeSentenceGames.remove(chatId);
        userStates.put(chatId, ConversationState.IN_MENU);
        showMainMenu(chatId);
    }

    private void showDictionary(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }
        User user = userOpt.get();
        String level = user.getLevel();
        String targetLang = user.getTargetLanguage();

        List<Word> allWords = wordRepository.findByLevelAndLang(level, targetLang);

        if (allWords.isEmpty()) {
            String nativeLang = user.getNativeLanguage();
            String message = nativeLang.equals("ru") ? "üòî –ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è." : "üòî Ê≠§Á∫ßÂà´Ê≤°ÊúâÂçïËØç„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
            return;
        }

        int currentPage = userDictionaryPage.getOrDefault(chatId, 0);
        int pageSize = 30;
        int totalPages = (int) Math.ceil((double) allWords.size() / pageSize);

        if (currentPage >= totalPages) {
            currentPage = Math.max(0, totalPages - 1);
            userDictionaryPage.put(chatId, currentPage);
        }
        if (currentPage < 0) {
            currentPage = 0;
            userDictionaryPage.put(chatId, currentPage);
        }

        int fromIndex = currentPage * pageSize;
        int toIndex = Math.min(fromIndex + pageSize, allWords.size());
        List<Word> wordsOnPage = allWords.subList(fromIndex, toIndex);

        StringBuilder sb = new StringBuilder();
        String nativeLang = user.getNativeLanguage();

        if (nativeLang.equals("ru")) {
            sb.append("üìñ –°–ª–æ–≤–∞—Ä—å (").append(currentPage + 1).append("/").append(totalPages).append("):\n\n");
        } else {
            sb.append("üìñ ËØçÂÖ∏ (").append(currentPage + 1).append("/").append(totalPages).append("):\n\n");
        }

        for (Word w : wordsOnPage) {
            String wordLine;
            if (w.getTranscription() != null && !w.getTranscription().isEmpty()) {
                wordLine = "‚Ä¢ " + w.getWord() + " (" + w.getTranscription() + ") ‚Äî " + w.getTranslation();
            } else {
                wordLine = "‚Ä¢ " + w.getWord() + " ‚Äî " + w.getTranslation();
            }
            sb.append(wordLine).append("\n");
        }

        InlineKeyboardMarkup keyboard = createDictionaryInlineKeyboard(chatId, currentPage, totalPages, nativeLang);

        sendMessageWithInlineKeyboard(chatId, sb.toString(), keyboard);
    }

    private void sendMessageWithInlineKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        try {
            Map<String, Object> request = new HashMap<>();
            request.put("chat_id", chatId);
            request.put("text", text);
            request.put("parse_mode", "Markdown");
            request.put("reply_markup", keyboard);

            RestTemplate restTemplate = new RestTemplate();
            restTemplate.postForObject(SEND_MESSAGE_URL + BOT_TOKEN + "/sendMessage", request, String.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup createDictionaryInlineKeyboard(Long chatId, int currentPage, int totalPages, String nativeLang) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        if (currentPage > 0) {
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText(nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ");
            backButton.setCallbackData("dict_prev:" + (currentPage - 1));
            navRow.add(backButton);
        }
        if (currentPage < totalPages - 1) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText(nativeLang.equals("ru") ? "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è" : "‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è");
            nextButton.setCallbackData("dict_next:" + (currentPage + 1));
            navRow.add(nextButton);
        }

        if (!navRow.isEmpty()) {
            rows.add(navRow);
        }

        List<InlineKeyboardButton> menuRow = new ArrayList<>();
        InlineKeyboardButton menuButton = new InlineKeyboardButton();
        menuButton.setText(nativeLang.equals("ru") ? "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" : "üîô ‰∏ªËèúÂçï");
        menuButton.setCallbackData("main_menu");
        menuRow.add(menuButton);
        rows.add(menuRow);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private void editMessageWithDictionary(Long chatId, Integer messageId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) return;

        User user = userOpt.get();
        String level = user.getLevel();
        String targetLang = user.getTargetLanguage();

        List<Word> allWords = wordRepository.findByLevelAndLang(level, targetLang);
        int pageSize = 30;
        int totalPages = (int) Math.ceil((double) allWords.size() / pageSize);

        int currentPage = userDictionaryPage.getOrDefault(chatId, 0);

        int fromIndex = currentPage * pageSize;
        int toIndex = Math.min(fromIndex + pageSize, allWords.size());
        List<Word> wordsOnPage = allWords.subList(fromIndex, toIndex);

        StringBuilder sb = new StringBuilder();
        String nativeLang = user.getNativeLanguage();

        if (nativeLang.equals("ru")) {
            sb.append("üìñ –°–ª–æ–≤–∞—Ä—å (").append(currentPage + 1).append("/").append(totalPages).append("):\n\n");
        } else {
            sb.append("üìñ ËØçÂÖ∏ (").append(currentPage + 1).append("/").append(totalPages).append("):\n\n");
        }

        for (Word w : wordsOnPage) {
            String wordLine;
            if (w.getTranscription() != null && !w.getTranscription().isEmpty()) {
                wordLine = "‚Ä¢ " + w.getWord() + " (" + w.getTranscription() + ") ‚Äî " + w.getTranslation();
            } else {
                wordLine = "‚Ä¢ " + w.getWord() + " ‚Äî " + w.getTranslation();
            }
            sb.append(wordLine).append("\n");
        }

        InlineKeyboardMarkup keyboard = createDictionaryInlineKeyboard(chatId, currentPage, totalPages, nativeLang);

        editMessageText(chatId, messageId, sb.toString(), keyboard);
    }

    private void editMessageText(Long chatId, Integer messageId, String text, InlineKeyboardMarkup keyboard) {
        try {
            Map<String, Object> request = new HashMap<>();
            request.put("chat_id", chatId);
            request.put("message_id", messageId);
            request.put("text", text);
            request.put("parse_mode", "Markdown");
            request.put("reply_markup", keyboard);

            RestTemplate restTemplate = new RestTemplate();
            restTemplate.postForObject(SEND_MESSAGE_URL + BOT_TOKEN + "/editMessageText", request, String.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleDictionaryCommand(Long chatId, String text) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            userStates.put(chatId, ConversationState.IN_MENU);
            return;
        }
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        if (text.equals(nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ")) {
            int currentPage = userDictionaryPage.getOrDefault(chatId, 0);
            if (currentPage > 0) {
                userDictionaryPage.put(chatId, currentPage - 1);
            }
            showDictionary(chatId);
        } else if (text.equals(nativeLang.equals("ru") ? "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è" : "‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è")) {
            int currentPage = userDictionaryPage.getOrDefault(chatId, 0);
            int totalPages = (int) Math.ceil((double) wordRepository.findByLevelAndLang(
                userOpt.get().getLevel(), userOpt.get().getTargetLanguage()).size() / 30.0);
            if (currentPage < totalPages - 1) {
                userDictionaryPage.put(chatId, currentPage + 1);
            }
            showDictionary(chatId);
        } else if (text.equals(nativeLang.equals("ru") ? "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" : "üîô ‰∏ªËèúÂçï")) {
            userStates.put(chatId, ConversationState.IN_MENU);
            showMainMenu(chatId);
        } else {
            showDictionary(chatId);
        }
    }

    private void sendDictionaryPaginationKeyboard(Long chatId, int currentPage, int totalPages) {
        String nativeLang = userRepository.findByChatId(chatId).map(User::getNativeLanguage).orElse("ru");

        List<List<String>> buttons = new ArrayList<>();

        List<String> navRow = new ArrayList<>();
        if (currentPage > 0) {
            navRow.add(nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" : "‚¨ÖÔ∏è ‰∏ä‰∏ÄÈ°µ");
        }
        if (currentPage < totalPages - 1) {
            navRow.add(nativeLang.equals("ru") ? "–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è" : "‰∏ã‰∏ÄÈ°µ ‚û°Ô∏è");
        }
        if (!navRow.isEmpty()) {
            buttons.add(navRow);
        }

        buttons.add(List.of(nativeLang.equals("ru") ? "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" : "üîô ‰∏ªËèúÂçï"));

        sendMessageWithButtons(chatId, " ", buttons);
    }

    private void showMyWords(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }

        List<UserWord> userWords = userWordRepository.findByUserChatId(chatId);
        if (userWords.isEmpty()) {
            String nativeLang = userOpt.get().getNativeLanguage();
            String message = nativeLang.equals("ru") ? "üîÅ –¢—ã –µ—â—ë –Ω–µ –æ—Ç–º–µ—Ç–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∫–∞–∫ '–Ω–µ –∑–Ω–∞—é'." : "üîÅ ‰Ω†ËøòÊ≤°ÊúâÊ†áËÆ∞‰ªª‰ΩïÂçïËØç‰∏∫‚Äú‰∏çËÆ§ËØÜ‚Äù„ÄÇ";
            sendMessage(chatId, message);
            showMainMenu(chatId);
            return;
        }

        String nativeLang = userOpt.get().getNativeLanguage();
        String myWordsTitle = nativeLang.equals("ru") ? "üîÅ *–¢–≤–æ–∏ —Å–ª–æ–≤–∞ (–ù–µ –∑–Ω–∞—é)*\n\n" : "üîÅ *‰Ω†ÁöÑÂçïËØç (‰∏çËÆ§ËØÜ)*\n\n";

        StringBuilder sb = new StringBuilder();
        sb.append(myWordsTitle);

        List<List<String>> buttons = new ArrayList<>();
        List<String> row = new ArrayList<>();
        Map<String, Long> deleteMap = new HashMap<>();

        for (int i = 0; i < Math.min(userWords.size(), 20); i++) {
            UserWord uw = userWords.get(i);
            sb.append((i+1)).append(". ").append(uw.getWord().getWord()).append(" - ").append(uw.getWord().getTranslation()).append("\n");

            String buttonText = nativeLang.equals("ru") ? "‚ùå " : "‚ùå ";
            buttonText += uw.getWord().getWord();
            deleteMap.put(buttonText, uw.getWord().getId());
            row.add(buttonText);

            if (row.size() == 2) {
                buttons.add(new ArrayList<>(row));
                row.clear();
            }
        }

        if (!row.isEmpty()) {
            buttons.add(row);
        }

        String backButtonText = nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" : "‚¨ÖÔ∏è ËøîÂõûËèúÂçï";
        buttons.add(List.of(backButtonText));

        userWordDeleteMap.put(chatId, deleteMap);

        sendMessageWithButtons(chatId, sb.toString(), buttons);
        userStates.put(chatId, ConversationState.IN_MY_WORDS);
    }

    private void handleMyWordsCommand(Long chatId, String command) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");

        String backButtonText = nativeLang.equals("ru") ? "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" : "‚¨ÖÔ∏è ËøîÂõûËèúÂçï";

        if (command.equals(backButtonText)) {
            userStates.put(chatId, ConversationState.IN_MENU);
            showMainMenu(chatId);
            userWordDeleteMap.remove(chatId);
            return;
        } else if (command.startsWith(nativeLang.equals("ru") ? "‚ùå " : "‚ùå ")) {
            handleDeleteWord(chatId, command);
            return;
        } else {
            String instruction = nativeLang.equals("ru") ? "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å '–ú–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏' –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏." : "Ë¶Å‰∏é‚ÄúÊàëÁöÑÂçïËØç‚Äù‰∫íÂä®ÔºåËØ∑‰ΩøÁî®ÊåâÈíÆ„ÄÇ";
            sendMessage(chatId, instruction);
            showMyWords(chatId);
        }
    }

    private void handleDeleteWord(Long chatId, String buttonCommand) {
        Map<String, Long> deleteMap = userWordDeleteMap.get(chatId);
        if (deleteMap == null || !deleteMap.containsKey(buttonCommand)) {
            Optional<User> userOpt = userRepository.findByChatId(chatId);
            String nativeLang = userOpt.map(User::getNativeLanguage).orElse("ru");
            String errorMessage = nativeLang.equals("ru") ? "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞." : "‚ùå Âà†Èô§ÂçïËØçÊó∂Âá∫Èîô„ÄÇ";
            sendMessage(chatId, errorMessage);
            showMyWords(chatId);
            return;
        }

        Long wordIdToDelete = deleteMap.get(buttonCommand);
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            userWordDeleteMap.remove(chatId);
            return;
        }

        Optional<UserWord> userWordOpt = userWordRepository.findByUserChatIdAndWordId(chatId, wordIdToDelete);
        if (userWordOpt.isPresent()) {
            userWordRepository.delete(userWordOpt.get());
            Optional<Word> wordOpt = wordRepository.findById(wordIdToDelete);
            String wordStr = wordOpt.map(Word::getWord).orElse("—Å–ª–æ–≤–æ");
            String nativeLang = userOpt.get().getNativeLanguage();
            String successMessage;
            if (nativeLang.equals("ru")) {
                successMessage = "‚úÖ –°–ª–æ–≤–æ *" + wordStr + "* —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞.";
            } else {
                successMessage = "‚úÖ ÂçïËØç *" + wordStr + "* Â∑≤‰ªé‰Ω†ÁöÑÂàóË°®‰∏≠Âà†Èô§„ÄÇ";
            }
            sendMessage(chatId, successMessage);
        } else {
            String nativeLang = userOpt.get().getNativeLanguage();
            String notFoundMessage = nativeLang.equals("ru") ? "‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ." : "‚ùå ‰Ω†ÁöÑÂàóË°®‰∏≠Êâæ‰∏çÂà∞ËØ•ÂçïËØç„ÄÇ";
            sendMessage(chatId, notFoundMessage);
        }

        showMyWords(chatId);
    }

    private void showSettings(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            String nativeLang = user.getNativeLanguage();

            String settingsText;
            List<List<String>> settingsButtons;
            
            if ("ru".equals(nativeLang)) {
                settingsText = "‚öôÔ∏è *–¢–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n" +
                            "–†–æ–¥–Ω–æ–π —è–∑—ã–∫: " + ("ru".equals(user.getNativeLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                            "–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫: " + ("ru".equals(user.getTargetLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                            "–£—Ä–æ–≤–µ–Ω—å: " + user.getLevel() + "\n\n" +
                            "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å?";
                
                settingsButtons = List.of(
                    List.of("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫"),
                    List.of("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫"),
                    List.of("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"),
                    List.of("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
                );
            } else {
                settingsText = "‚öôÔ∏è *‰Ω†ÁöÑËÆæÁΩÆ:*\n" +
                            "ÊØçËØ≠: " + ("ru".equals(user.getNativeLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                            "Â≠¶‰π†ËØ≠Ë®Ä: " + ("ru".equals(user.getTargetLanguage()) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "\n" +
                            "Á∫ßÂà´: " + user.getLevel() + "\n\n" +
                            "ÊÉ≥Ë¶ÅÊîπÂèò‰ªÄ‰πàÂêóÔºü";
                
                settingsButtons = List.of(
                    List.of("üîÑ ÊîπÂèòÊØçËØ≠"),
                    List.of("üîÑ ÊîπÂèòÂ≠¶‰π†ËØ≠Ë®Ä"),
                    List.of("üîÑ ÊîπÂèòÁ∫ßÂà´"),
                    List.of("‚¨ÖÔ∏è ËøîÂõûËèúÂçï")
                );
            }

            sendMessageWithButtons(chatId, settingsText, settingsButtons);
            userStates.put(chatId, ConversationState.IN_SETTINGS); 
            
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
        }
    }

    private enum ConversationState {
        START, AWAITING_NATIVE_LANG, AWAITING_TARGET_LANG, AWAITING_LEVEL,
        IN_MENU, IN_MY_WORDS, IN_SENTENCE_GAME, IN_SETTINGS, IN_DICTIONARY,
        AWAITING_NEW_NATIVE_LANG, AWAITING_NEW_TARGET_LANG, AWAITING_NEW_LEVEL
    }

    private void handleSettingsCommand(Long chatId, String command) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
            return;
        }
        
        User user = userOpt.get();
        String nativeLang = user.getNativeLanguage();

        String changeNativeCmdRu = "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫";
        String changeTargetCmdRu = "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫";
        String changeLevelCmdRu = "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å";
        String backCmdRu = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é";
        
        String changeNativeCmdZh = "üîÑ ÊîπÂèòÊØçËØ≠";
        String changeTargetCmdZh = "üîÑ ÊîπÂèòÂ≠¶‰π†ËØ≠Ë®Ä";
        String changeLevelCmdZh = "üîÑ ÊîπÂèòÁ∫ßÂà´";
        String backCmdZh = "‚¨ÖÔ∏è ËøîÂõûËèúÂçï";

        switch (command) {
            case "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫", "üîÑ ÊîπÂèòÊØçËØ≠" -> { 
                String text = "ru".equals(nativeLang) ? "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫:" : "ÈÄâÊã©‰Ω†ÁöÑÊñ∞ÊØçËØ≠Ôºö";
                List<List<String>> languageButtons = List.of(List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá®üá≥ ‰∏≠Êñá"));
                sendMessageWithButtons(chatId, text, languageButtons);
                userStates.put(chatId, ConversationState.AWAITING_NEW_NATIVE_LANG);
            }
            case "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫", "üîÑ ÊîπÂèòÂ≠¶‰π†ËØ≠Ë®Ä" -> {
                handleNewTargetLanguageRequest(chatId); 
            }
            case "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", "üîÑ ÊîπÂèòÁ∫ßÂà´" -> {
                String text = "ru".equals(nativeLang) ? "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:" : "ÈÄâÊã©‰Ω†ÁöÑÊñ∞Á∫ßÂà´Ôºö";
                List<List<String>> levelButtons = List.of(
                    List.of("A1", "A2"),
                    List.of("B1", "B2"),
                    List.of("C1", "C2")
                );
                sendMessageWithButtons(chatId, text, levelButtons);
                userStates.put(chatId, ConversationState.AWAITING_NEW_LEVEL);
            }
            case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "‚¨ÖÔ∏è ËøîÂõûËèúÂçï" -> {
                showMainMenu(chatId);
                userStates.put(chatId, ConversationState.IN_MENU);
            }
            default -> {
                String errorMessage = "ru".equals(nativeLang) ? 
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫." : 
                    "Êú™Áü•ÂëΩ‰ª§„ÄÇËØ∑‰ΩøÁî®ËÆæÁΩÆËèúÂçï„ÄÇ";
                sendMessage(chatId, errorMessage);
                showSettings(chatId);
            }
        }
    }

    private void handleNewTargetLanguageRequest(Long chatId) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            String nativeLang = user.getNativeLanguage();
            String text = "ru".equals(nativeLang) ? "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:" : "ÈÄâÊã©‰Ω†Ë¶ÅÂ≠¶‰π†ÁöÑÊñ∞ËØ≠Ë®ÄÔºö";
            List<List<String>> targetLangButtons;
            if ("ru".equals(nativeLang)) {
                targetLangButtons = List.of(List.of("üá®üá≥ ‰∏≠Êñá"));
            } else {
                targetLangButtons = List.of(List.of("üá∑üá∫ –†—É—Å—Å–∫–∏–π"));
            }
            sendMessageWithButtons(chatId, text, targetLangButtons);
            userStates.put(chatId, ConversationState.AWAITING_NEW_TARGET_LANG);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
        }
    }

    private void handleNewNativeLanguageSelection(Long chatId, String selectedLanguage) {
        String nativeLangCode;
        if (selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            nativeLangCode = "ru";
        } else if (selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            nativeLangCode = "zh";
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setNativeLanguage(nativeLangCode);
            userRepository.save(user);

            String confirmationText = "‚úÖ –†–æ–¥–Ω–æ–π —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *" +
                    ("ru".equals(nativeLangCode) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "*";
            sendMessage(chatId, confirmationText);

            String newTargetLang = "ru".equals(nativeLangCode) ? "zh" : "ru";
            user.setTargetLanguage(newTargetLang);
            userRepository.save(user);
            
            String autoChangeText = "üîÑ –ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *" +
                    ("ru".equals(newTargetLang) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "*";
            sendMessage(chatId, autoChangeText);
            
            showSettings(chatId);
            userStates.put(chatId, ConversationState.IN_SETTINGS);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
        }
    }

    private void handleNewTargetLanguageSelection(Long chatId, String selectedLanguage) {
        String targetLangCode;
        if (selectedLanguage.equals("üá∑üá∫ –†—É—Å—Å–∫–∏–π")) {
            targetLangCode = "ru";
        } else if (selectedLanguage.equals("üá®üá≥ ‰∏≠Êñá")) {
            targetLangCode = "zh";
        } else {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setTargetLanguage(targetLangCode);
            userRepository.save(user);

            String confirmationText = "‚úÖ –ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *" +
                    ("ru".equals(targetLangCode) ? "üá∑üá∫ –†—É—Å—Å–∫–∏–π" : "üá®üá≥ ‰∏≠Êñá") + "*";
            sendMessage(chatId, confirmationText);
            showSettings(chatId);
            userStates.put(chatId, ConversationState.IN_SETTINGS);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
        }
    }

    private void handleNewLevelSelection(Long chatId, String selectedLevel) {
        if (!List.of("A1", "A2", "B1", "B2", "C1", "C2").contains(selectedLevel)) {
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
            return;
        }

        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setLevel(selectedLevel);
            userRepository.save(user);

            String confirmationText = "‚úÖ –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *" + selectedLevel + "*";
            sendMessage(chatId, confirmationText);
            showSettings(chatId);
            userStates.put(chatId, ConversationState.IN_SETTINGS);
        } else {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            showMainMenu(chatId);
        }
    }

    private void addToMyWords(Long chatId, Word word) {
        Optional<User> userOpt = userRepository.findByChatId(chatId);
        if (userOpt.isPresent()) {
            Optional<UserWord> existingUW = userWordRepository.findByUserChatIdAndWordId(chatId, word.getId());
            if (existingUW.isEmpty()) {
                UserWord uw = new UserWord();
                uw.setUserChatId(chatId);
                uw.setWord(word);
                userWordRepository.save(uw);
            }
        }
    }

    private static class FlashcardGameSession {
        private final Long userId;
        private final String gameType;
        private final List<Word> words;
        private int currentIndex;

        public FlashcardGameSession(Long userId, String gameType, List<Word> words, int currentIndex) {
            this.userId = userId;
            this.gameType = gameType;
            this.words = new ArrayList<>(words);
            this.currentIndex = currentIndex;
        }

        public Long getUserId() { return userId; }
        public String getGameType() { return gameType; }
        public List<Word> getWords() { return words; }
        public int getCurrentIndex() { return currentIndex; }
        public void setCurrentIndex(int currentIndex) { this.currentIndex = currentIndex; }
    }

    private static class SentenceGameSession {
        private final Long userId;
        private final List<Word> words;
        private final String correctSentence;

        public SentenceGameSession(Long userId, List<Word> words, String correctSentence) {
            this.userId = userId;
            this.words = new ArrayList<>(words);
            this.correctSentence = correctSentence;
        }

        public Long getUserId() { return userId; }
        public List<Word> getWords() { return words; }
        public String getCorrectSentence() { return correctSentence; }
    }
}